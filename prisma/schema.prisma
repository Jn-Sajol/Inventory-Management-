// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  ATTENDENT
}

enum Gender {
  MALE
  FEMALE
}

enum CustomerType {
  RETAIL
  WHOLESALE
  DISTRIBUTOR
  OTHER
}

enum SupplierType {
  MANUFACTURER
  DISTRIBUTOR
  WHOLESALER
  RETAILER
  OTHER
}

enum PaymentStatus {
  PAID
  CREDIT
}

model User {
  id        Int      @unique @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  firstname String
  lastname  String
  phone     Int      @unique
  dob       DateTime
  gender    Gender
  image     String?
  role      Role     @default(ATTENDENT)
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  shop      Shop[]
}

model Shop {
  id          Int       @unique @default(autoincrement())
  name        String
  slug        String    @unique
  location    String
  createAt    DateTime  @default(now())
  updateAt    DateTime  @updatedAt
  adminId     Int
  admin       User      @relation(fields: [adminId], references: [id])
  attendentId Int[]
  poduct      Product[]
}

model Customer {
  id                  Int          @unique @default(autoincrement())
  customerType        CustomerType
  email               String       @unique
  firstname           String
  lastname            String
  phone               Int          @unique
  gender              Gender
  maxCreditLimit      Float
  maxCreditDays       Int
  unpaidCurrentAmount Int?         @default(0)
  taxPin              Int?
  nid                 String       @unique
  country             String
  location            String
  createAt            DateTime     @default(now())
  updateAt            DateTime     @updatedAt
  //relation
  sale                Sale[]
}

model Supplier {
  id                 Int          @unique @default(autoincrement())
  supplierType       SupplierType
  name               String
  contactPerson      String
  phone              String       @unique
  email              String?      @unique
  location           String?
  country            String?
  website            String?
  taxPin             String?      @unique
  registrationNumber String?      @unique
  bankAccountNumber  String?
  bankName           String?
  paymentTerms       String?
  logo               String
  rating             Float?
  notes              String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  Product            Product[]
}

model Unit {
  id           Int       @unique @default(autoincrement())
  name         String
  abbreviation String
  slug         String    @unique
  createAt     DateTime  @default(now())
  updateAt     DateTime  @updatedAt
  Product      Product[]
}

model Brand {
  id       Int       @unique @default(autoincrement())
  name     String
  slug     String    @unique
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  Product  Product[]
}

model Category {
  id       Int       @unique @default(autoincrement())
  name     String
  slug     String    @unique
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  Product  Product[]
}

model Product {
  id                 Int        @unique @default(autoincrement())
  name               String
  description        String?
  productBatchNumber Int?
  image              String?
  sku                String     @unique
  productCode        String     @unique
  alertQuantity      Int
  stockQuantity      Int
  productBarcode     Int?
  price              Int
  wholesalePrice     Int        @default(0)
  slug               String     @unique
  expiredate         DateTime
  supplierId         Int
  unitId             Int
  brandId            Int
  categoryId         Int
  shopId             Int        @default(1)
  shop               Shop       @relation(fields: [shopId], references: [id])
  unit               Unit       @relation(fields: [unitId], references: [id])
  brand              Brand      @relation(fields: [brandId], references: [id])
  category           Category   @relation(fields: [categoryId], references: [id])
  supplier           Supplier   @relation(fields: [supplierId], references: [id])
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  Saleitem           SaleItem[]
}

model Sale {
  id              Int           @unique @default(autoincrement())
  customerId      Int
  customerName    String
  saleNumber     Int        @unique
  customerEmail   String?
  saleAmount     Int?
  balanceAmount   Int           @default(0)
  paidAmount      Int
  saleType       String?
  paymentStatus   String
  paymentMethod   String
  transactionCode String?

  // Relationships
  // orderItems       OrderItem[]
  saleItem     SaleItem[]
  customer  Customer   @relation(fields: [customerId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model SaleItem {
  id            Int      @unique @default(autoincrement())
  saleId       Int
  productId     Int
  qty           Int
  productPrice     Float
  productName   String
  productImage  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  product Product @relation(fields: [productId], references: [id])
  sale    Sale    @relation(fields: [saleId], references: [id])
}

// model OrderItem {
//   id               Int @default(autoincrement()) @unique
//   productId        Int
//   orderId          Int
//   name             String
//   price            Float
//   qty              Int
//   productThumbnail String
//   createdAt        DateTime @default(now())
//   updatedAt        DateTime @updatedAt

//   // Relationships
//   product Product @relation(fields: [productId], references: [id])
//   order   Order   @relation(fields: [orderId], references: [id])
// }
