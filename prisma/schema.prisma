// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  ATTENDENT
}

enum Gender {
  MALE
  FEMALE
}

enum CustomerType {
  RETAIL
  WHOLESALE
  DISTRIBUTOR
  OTHER
}

enum SupplierType {
  MANUFACTURER
  DISTRIBUTOR
  WHOLESALER
  RETAILER
  OTHER
}

model User {
  id        Int      @unique @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  firstname String
  lastname  String
  phone     Int      @unique
  dob       DateTime
  gender    Gender
  image     String?
  role      Role     @default(ATTENDENT)
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  shop      Shop[]
}

model Shop {
  id          Int      @unique @default(autoincrement())
  name        String
  slug        String   @unique
  location    String
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
  adminId     Int
  admin       User     @relation(fields: [adminId], references: [id])
  attendentId Int[]
}

model Customer {
  id             Int          @unique @default(autoincrement())
  customerType   CustomerType
  email          String       @unique
  firstname      String
  lastname       String
  phone          Int          @unique
  gender         Gender
  maxCreditLimit Float
  maxCreditDays  Int
  taxPin         Int?
  nid            String       @unique
  country        String
  location       String
  createAt       DateTime     @default(now())
  updateAt       DateTime     @updatedAt
}

model Supplier {
  id                 Int          @unique @default(autoincrement())
  supplierType       SupplierType
  name               String
  contactPerson      String
  phone              String       @unique
  email              String?      @unique
  location           String?
  country            String?
  website            String?
  taxPin             String?      @unique
  registrationNumber String?      @unique
  bankAccountNumber  String?
  bankName           String?
  paymentTerms       String?
  logo               String
  rating             Float?
  notes              String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  Product            Product[]
}

model Unit {
  id           Int       @unique @default(autoincrement())
  name         String
  abbreviation String
  slug         String    @unique
  product      String
  createAt     DateTime  @default(now())
  updateAt     DateTime  @updatedAt
  Product      Product[]
}

model Brand {
  id       Int       @unique @default(autoincrement())
  name     String
  slug     String    @unique
  product  String
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  Product  Product[]
}

model Category {
  id       Int       @unique @default(autoincrement())
  name     String
  slug     String    @unique
  product  String
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  Product  Product[]
}

model Product {
  id                 Int      @unique @default(autoincrement())
  name               String
  description        String?
  productBatchNumber Int?
  image              String?
  sku                String   @unique
  productCode        String   @unique
  alertQuantity      Int
  stockQuantity      Int
  productBarcode     Int?
  price              Int
  slug               String @unique
  expiredate         DateTime
  supplierId         Int
  unitId             Int
  brandId            Int
  categoryId         Int
  unit               Unit     @relation(fields: [unitId], references: [id])
  brand              Brand    @relation(fields: [brandId], references: [id])
  category           Category @relation(fields: [categoryId], references: [id])
  supplier           Supplier @relation(fields: [supplierId], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}
